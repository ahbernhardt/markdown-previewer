{"version":3,"sources":["components/Editor.js","components/Preview.js","components/Card/Card.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Editor","onChange","markdownValue","id","value","Preview","renderer","marked","Renderer","link","href","title","text","setOptions","breaks","dangerouslySetInnerHTML","__html","Card","children","className","Footer","target","rel","initialMd","App","state","handleChange","e","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gUAYeA,G,MATA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,cAAb,OACb,8BAAUC,GAAG,SAASC,MAAOF,EAAeD,SAAUA,M,gBCsBzCI,EAtBC,SAAC,GAAuB,IAArBH,EAAoB,EAApBA,cACXI,EAAW,IAAIC,IAAOC,SAS5B,OARAF,EAASG,KAAO,SAASC,EAAMC,EAAOC,GACpC,MAAM,2BAAN,OAAkCF,EAAlC,YAA0CE,EAA1C,SAGFL,IAAOM,WAAW,CAChBC,QAAQ,IAIR,yBACEX,GAAG,UACHY,wBAAyB,CAAEC,OAAQT,IAAOL,EAAe,CAAEI,iBCMlDW,G,MAnBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUP,EAAb,EAAaA,MAAb,OACX,yBAAKQ,UAAU,QACb,yBAAKA,UAAU,eACb,0BAAMA,UAAU,qBAAqBR,GACrC,yBAAKQ,UAAU,uBACb,0BAAMA,UAAU,aAChB,0BAAMA,UAAU,aAChB,0BAAMA,UAAU,eAGpB,yBAAKA,UAAU,gBAAgBD,MCWpBE,G,MAtBA,kBACb,4BAAQD,UAAU,UAChB,4CACc,IACZ,0CAIF,qCACA,8BACE,uBACEA,UAAU,cACVT,KAAK,wDACLW,OAAO,SACPC,IAAI,uBAJN,iBCNAC,EAAS,ioBAqEAC,E,4MAjCbC,MAAQ,CACNvB,cAAeqB,G,EAGjBG,aAAe,SAAAC,GACb,EAAKC,SAAS,CACZ1B,cAAeyB,EAAEN,OAAOjB,S,uDAIlB,IACAF,EAAkB2B,KAAKJ,MAAvBvB,cAER,OACI,yBAAKiB,UAAU,OACb,wBAAIA,UAAU,aAAd,mCACA,0BAAMA,UAAU,eACd,kBAAC,EAAD,CAAMR,MAAM,UACV,kBAAC,EAAD,CACIV,SAAU4B,KAAKH,aACfxB,cAAeA,KAGrB,kBAAC,EAAD,CAAMS,MAAM,WACV,kBAAC,EAAD,CAAST,cAAeA,MAG5B,kBAAC,EAAD,W,GA5BQ4B,aC9BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0783effd.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Editor = ({ onChange, markdownValue }) => (\n  <textarea id=\"editor\" value={markdownValue} onChange={onChange} />\n);\n\nEditor.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  markdownValue: PropTypes.string.isRequired\n};\n\nexport default Editor;\n","import React from 'react';\nimport marked from 'marked';\nimport PropTypes from 'prop-types';\n\nconst Preview = ({ markdownValue }) => {\n  const renderer = new marked.Renderer();\n  renderer.link = function(href, title, text) {\n    return `<a target=\"_blank\" href=${href}>${text}</a>`;\n  };\n\n  marked.setOptions({\n    breaks: true\n  });\n\n  return (\n    <div\n      id=\"preview\"\n      dangerouslySetInnerHTML={{ __html: marked(markdownValue, { renderer }) }}\n    />\n  );\n};\n\nPreview.propTypes = {\n  markdownValue: PropTypes.string.isRequired\n};\n\nexport default Preview;\n","import React from 'react';\nimport './Card.css';\nimport PropTypes from 'prop-types';\n\nconst Card = ({ children, title }) => (\n  <div className=\"Card\">\n    <div className=\"Card-header\">\n      <span className=\"Card-header-title\">{title}</span>\n      <div className=\"Card-header-circles\">\n        <span className=\"circle-1\" />\n        <span className=\"circle-2\" />\n        <span className=\"circle-3\" />\n      </div>\n    </div>\n    <div className=\"Card-content\">{children}</div>\n  </div>\n);\n\nCard.propTypes = {\n  children: PropTypes.node,\n  title: PropTypes.string.isRequired\n};\n\nexport default Card;\n","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => (\n  <footer className=\"Footer\">\n    <span>\n      Created by:{' '}\n      <a>\n        Anh Nguyen\n      </a>\n    </span>\n    <span> | </span>\n    <span>\n      <a\n        className=\"Footer-link\"\n        href=\"https://github.com/anguyen0208/fcc-markdown-previewer\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Repo Link\n      </a>\n    </span>\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Editor from './components/Editor';\nimport Preview from './components/Preview';\nimport Card from './components/Card/Card';\nimport Footer from './components/Footer/Footer';\n\nconst initialMd = `# Greetings Earthlings! \n## Welcome to my markdown previewer\n\n[freeCodeCamp](https://www.freecodecamp.org/)\n\nFront End Libraries Projects\n- Random Quote Machine\n- Markdown Previewer\n- Drum Machine\n- Javascript Calculator\n- Pomodoro Clock\n\nthis is a **bold** text, an _emphasis_ , a _**combined emphasis**_ , and a ~~strikethrough~~\n\nHead 1 | Head 2 | Head 3\n------ |--------| ------\nitem1 | item2 | item3\nitem4 | item5 | item6\nitem7 | item8 | item9\n\n> example of blockquote\n\nInline \\`code\\`\n\n\\`\\`\\`\n// code block\n\nfunction sum (x, y) {\n  return x + y;\n}\n\\`\\`\\`\n\n![Random Animals](https://loremflickr.com/320/240)\n`;\n\nclass App extends Component {\n  state = {\n    markdownValue: initialMd\n  };\n\n  handleChange = e => {\n    this.setState({\n      markdownValue: e.target.value\n    });\n  };\n\n  render() {\n    const { markdownValue } = this.state;\n\n    return (\n        <div className=\"App\">\n          <h1 className=\"App-title\"> &mdash;Markdown Previewer&mdash;</h1>\n          <main className=\"App-content\">\n            <Card title=\"Editor\">\n              <Editor\n                  onChange={this.handleChange}\n                  markdownValue={markdownValue}\n              />\n            </Card>\n            <Card title=\"Preview\">\n              <Preview markdownValue={markdownValue} />\n            </Card>\n          </main>\n          <Footer />\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}